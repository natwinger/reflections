What happens when you initialize a repository? Why do you need to do it?
    -an empty git repository is made in the current folder
    -you need to make a commit for it to store anything
    -you can check previous commits using git log
    -check changes from previous commit using git status

How is the staging area different from the working directory and the repository?
What value do you think it offers?
    -The staging area can have as many/few files as you want from the working 
    directory
    -The repository only has commits that have passed through the staging area
    -The staging area allows you to clearly see the commit you want from the 
    working directory
    -The working directory has the files that you are working on right now, after
    the last commit and before the staging area for the next commit

How can you use the staging area to make sure you have one commit per logical
change?
    -You can easily see the difference between the last commit and the current 
    version
    -If there is not enough/too many changes, the staging area can still be 
    compared to the working directory

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
    -If you want different versions of your code (ie. levels, languages)
    -If you want to edit something big (ie. new feature, big bug), but also like 
    the working version of your code and might want to keep that
    -Branches can be merged together later and help with organization

How do the diagrams help you visualize the branch structure?
    -You can see the commits that are not reachable (detached HEAD state)
    -You can see where your changes will be seen and the parent commits

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    -One (or more) branch(es) merges into the current branch
    -The final commit of each branch and the last common branch between them are 
    compared by git to know which lines to keep
    -The old branch(es) can be deleted

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
    -Git has some good features to know which lines are important or not
    -Git could save extra, redundant lines if the edits were moved around a lot
    -Manually merging allows you to have control and know exactly what is left
    after the merge is done
